@echo off
setlocal ENABLEEXTENSIONS

:: =====================================
:: ðŸ”§ INSTALL_ALL.BAT â€“ SETUP COMPLET
:: =====================================

:: Aller dans le dossier backend
cd /d "%~dp0backend"

:: CrÃ©er le venv si absent
if not exist ".venv" (
    echo [INFO] CrÃ©ation du venv...
    python -m venv .venv
)

:: Activer le venv
call .venv\Scripts\activate

:: Upgrade pip
python -m pip install --upgrade pip >nul 2>&1

:: VÃ©rification du fichier de dÃ©pendances
if not exist requirements.txt (
    echo [ERREUR] Aucun fichier requirements.txt trouvÃ© dans backend/.
    echo [ABORT] Impossible dâ€™installer sans dÃ©pendances dÃ©finies.
    pause
    exit /b
)

:: Installer les dÃ©pendances depuis requirements.txt
echo [INFO] Installation des dÃ©pendances depuis requirements.txt...
pip install -r requirements.txt

:: Corriger torch GPU si cassÃ©
python -c "import torch" >nul 2>&1
if errorlevel 1 (
    echo [FIX] torch GPU dÃ©tectÃ© â†’ reinstallation CPU
    pip uninstall torch -y
    pip install torch==2.1.0+cpu -f https://download.pytorch.org/whl/torch_stable.html
)

:: Lancer l'API localement avec uvicorn
echo [API] Lancement local sur http://localhost:8000 ...
uvicorn main:app --host 0.0.0.0 --port 8000

:: =====================================
:: ðŸš€ DEPLOY_RAILWAY.BAT â€“ DEPLOIEMENT
:: =====================================

:deploy_railway
@echo off
echo [RAILWAY] DÃ©ploiement en cours...
railway up
pause

:: =====================================
:: ðŸ“¥ COMMIT_LOCAL.BAT â€“ COMMIT SEUL
:: =====================================

:commit_local
@echo off
setlocal ENABLEEXTENSIONS

for /f "tokens=*" %%i in ('git rev-parse --abbrev-ref HEAD') do set BRANCH=%%i

set /p COMMENT=[GIT] Message du commit : 

echo [GIT] Ajout des fichiers...
git add .

echo [GIT] Commit sur la branche %BRANCH% avec message : %COMMENT%
git commit -m "%COMMENT%"

echo.
echo [âœ…] Commit local OK â€“ rien nâ€™a Ã©tÃ© pushÃ©.
pause
